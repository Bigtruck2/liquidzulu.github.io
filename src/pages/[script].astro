---
import '../css/global.css';
import { invert } from '../util/invert';
import { paginationPrevNext } from '../util/paginationPrevNext';
import { getCollection, getEntryBySlug } from 'astro:content';
import { readTimeMins, readTimeReadable } from '../util/readTime';

export const getStaticPaths = async () => {
    const scripts = await getCollection('scripts');
    return scripts.map(i => ({ params: { script: i.slug } }));
};

const { script } = Astro.params;
const slug = script;
const scriptInfo = await getEntryBySlug('scripts', slug);
const { Content, headings } = await scriptInfo.render();

import Layout from '../layouts/Layout.astro';
import { BuyCoffee, Navbar, Footer, SkipToContent, TOC } from '../components';

import { Debug } from 'astro/components';
---

<script>
    // this does that thing on mises.org where it highlights the footnote you just clicked on
    const removeHighlights = () => {
        document
            .querySelectorAll('.fn-highlight')
            .forEach(el => el.classList.remove('fn-highlight'));
    };

    const fnHighlight = fn => {
        // remove highlight from footnotes before highlighting, so that multiple dont get highlighted
        removeHighlights();

        // highlight the desired footnote
        document
            .getElementById(fn)
            .parentElement.parentElement.classList.add('fn-highlight');
    };

    /* do this if you only want it to trigger on footrefs, I want the highlights to disappear when I click other links though
    document.querySelectorAll('.footref').forEach(
    el =>
    (el.onclick = () => {
    console.log('fn.' + el.id.split('.')[1]);
    fnHighlight('fn.' + el.id.split('.')[1]);
    })
    );
  */

    Array.prototype.slice
        .call(document.getElementsByTagName('a'))
        .forEach(el => {
            if (el.id.split('.')[0] === 'fnr' && !isNaN(el.id.split('.')[1])) {
                el.onclick = () => fnHighlight('fn.' + el.id.split('.')[1]);

                // I also want the titles to reflect the footnote content
                el.title = document
                    .getElementById('fn.' + el.id.split('.')[1])
                    .parentElement.parentElement.innerText.substring(2);
            } else {
                el.onclick = removeHighlights;
            }
        });

    const location = window.location.href;

    // why so many ifs? funy.
    if (location.split('#').length == 2) {
        if (location.split('#')[1].split('.').length == 2) {
            if (
                location.split('#')[1].split('.')[0] == 'fn' &&
                !isNaN(location.split('#')[1].split('.')[1])
            ) {
                fnHighlight(location.split('#')[1]);
            }
        }
    }
</script>

<script>
    // this script adds little links next to the section headings, if you have js off then fuck you it wont work because I wasn't clever enough to make it work in pure css
    const headerLevels = 4;

    // [ h1, h2, etc ]
    const tags = Array.from(Array(headerLevels).keys()).map(i => 'h' + (i + 1));

    tags.forEach(t =>
        Array.from(
            document.getElementById('md-content').getElementsByTagName(t)
        ).forEach(header => {
            // make the elements
            const div = document.createElement('div');
            const a = document.createElement('a');

            // insert the elements
            header.parentNode.insertBefore(div, header);
            div.appendChild(a);
            div.appendChild(header);

            // modify the elements
            div.className = t + ' header-wrapper';
            header.className = 'header';
            a.className = 'section-heading-link';
            a.href = `#${header.id}`;
        })
    );
</script>

<Layout
    title={scriptInfo.data.title}
    description={scriptInfo.data.description}
    ptype="article"
    published={scriptInfo.data.date}
    MJ={true}
    slug={slug}>
    <SkipToContent href="#md-content" />
    <Navbar path={`scripts/${slug}`} />
    <div
        class="absolute h-[100vh] h-[100svh] w-[100vw] blur-sm brightness-[0.25] saturate-[0.7]"
        style=`background-image: url(/images/thumb/${slug}.webp); background-repeat: no-repeat; background-size: cover;`>
    </div>
    <div class="hero min-h-screen bg-transparent">
        <div class="hero-overlay bg-opacity-60"></div>
        <div class="hero-content text-center text-neutral-content">
            <div class="max-w-2xl">
                <h1 class="mb-7 text-5xl font-bold">
                    {scriptInfo.data.title}
                </h1>
                <p class="mb-5 text-xl">{scriptInfo.data.description}</p>
                <p class="text-zinc-400">
                    {readTimeReadable(readTimeMins, scriptInfo.body)}
                </p>
            </div>
        </div>
    </div>
    <div
        class="w-[100vw] place-items-center grid animate-bounce text-7xl top-[90vh] top-[90svh] absolute z-10">
        <a href="#md-content">ðŸ‘‡</a>
    </div>
    <main id="md-content" class="w-[100vw] bg-zinc-900 flex flex-row">
        <TOC slug={slug} headings={headings} />
        <article
            class="min-[1132px]:w-[80vw] w-[100vw] bg-zinc-800 text-justify md:p-16 p-6">
            <Content />
        </article>
    </main>
    <Footer noShadow={true} />
    <BuyCoffee>Like this content? Click here for more!</BuyCoffee>
</Layout>

<!-- is:global required to apply styles to the rendered MD -->
<style is:global lang="scss">
    .fn-highlight {
        @apply bg-zinc-600 rounded-sm p-[0.5rem] m-[-0.5rem];
    }
    #md-content {
        .section-heading-link {
            -webkit-mask: url('/link.svg') no-repeat 50% 50%;
            mask: url('/link.svg') no-repeat 50% 50%;
            -webkit-mask-size: cover;
            mask-size: cover;
            @apply shrink-0 w-[2.5rem] h-[2rem] overflow-visible bg-slate-50 opacity-[0] ml-[-2.5rem] mr-2 transition-all;

            &:focus {
                @apply opacity-[0.8] bg-sky-500 scale-110;
            }
        }
        .header-wrapper {
            @apply flex items-center justify-center;

            &:hover {
                .section-heading-link {
                    @apply opacity-[0.2];
                }
            }
        }
        /*
        // abandoned because I cant turn a ::before into a link
        h1::before,
        h2::before,
        h3::before,
        h4::before {
        content: '';
        -webkit-mask: url('/link.svg') no-repeat 50% 50%;
        mask: url('/link.svg') no-repeat 50% 50%;
        -webkit-mask-size: cover;
        mask-size: cover;
        display: inline-block;
        width: 2rem;
        height: 2rem;
        @apply bg-slate-50 opacity-[0.2];
        }*/
        .h1 {
            @apply text-6xl font-bold text-center mt-24 mb-16;
        }

        .h2 {
            @apply text-5xl font-bold text-center mt-20 mb-12;
        }

        .h3 {
            @apply text-5xl font-semibold text-center mt-16 mb-10;
        }

        .h4 {
            @apply text-4xl font-semibold text-center mt-8 mb-4;
        }

        p,
        ol {
            @apply my-4 text-justify text-lg min-[2000px]:text-2xl min-[2500px]:text-3xl;
        }

        blockquote {
            @apply border-l-4 border-zinc-700 pl-4;
        }

        img {
            margin: auto;
        }

        article {
            ol,
            ul {
                @apply ml-6;
            }

            ol {
                @apply list-decimal;
            }

            ul {
                @apply list-disc;
            }

            a {
                @apply text-sky-500;

                &:not(.footref) {
                    @apply hover:link;
                }
            }

            #footnotes ~ p {
                @apply text-left;
            }
        }
    }
</style>
