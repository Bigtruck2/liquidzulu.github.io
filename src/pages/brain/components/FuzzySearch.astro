---
import Fuse from 'fuse.js';
import { getSlug } from '../../../util/getSlug';
const { collection } = Astro.props;
const slugMap = Object.fromEntries(collection.map(k => [k, getSlug(k)]));
---

<button
    id="fuzzy_search_button"
    type="button"
    class="border border-zinc-100 hidden w-64 lg:flex items-center text-sm leading-6 text-zinc-100 rounded-sm ring-1 ring-zinc-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-zinc-300 highlight-white/5 hover:bg-zinc-700"
    ><svg
        width="24"
        height="24"
        fill="none"
        aria-hidden="true"
        class="mr-3 flex-none"
        ><path
            d="m19 19-3.5-3.5"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path><circle
            cx="11"
            cy="11"
            r="6"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></circle></svg
    >Fuzzy search<span class="ml-auto pl-3 flex-none text-xs font-semibold"
        ><kbd
            id="fuzzy_search_key_alt"
            class="kbd border border-zinc-100 bg-[#0B0F13] rounded-sm">Alt</kbd
        >
        <kbd
            id="fuzzy_search_key_x"
            class="kbd border border-zinc-100 bg-[#0B0F13] rounded-sm">X</kbd
        ></span
    ></button
>

<dialog
    transition:slide
    id="fuzzy_search_modal"
    class="bg-[#0B0F13] text-zinc-100 p-4 rounded-md border border-zinc-100">
    <input
        id="fuzzy_search_input"
        type="text"
        placeholder="Type here"
        class="bg-[#0B0F13] border border-zinc-100 input w-full placeholder-zinc-400 rounded-sm"
    />
    <ul id="fuzzy_search_results" class="list-none w-[40vw] h-[30vh] pt-2"></ul>
</dialog>

<script define:vars={{ collection: collection, slugMap: slugMap }} defer>
    const collectionElements = collection.map(x => {
        let li = document.createElement('li');
        let a = document.createElement('a');
        a.innerText = x;
        a.href = '/brain/note/' + slugMap[x];
        li.appendChild(a);
        li.id = x;
        li.style.display = 'none';
        return li;
    });
    window.addEventListener('click', e => {
        if (
            ![
                document.getElementById('fuzzy_search_button'),
                document.getElementById('fuzzy_search_modal'),
                document.getElementById('fuzzy_search_input'),
                document.getElementById('fuzzy_search_results'),
            ].includes(e.srcElement)
        ) {
            document.getElementById('fuzzy_search_modal').close();
        }
    });
    window.addEventListener('load', () => {
        let pressedKeys = {};
        const [key_alt, key_x] = [18, 88];
        const [el_alt, el_x] = [
            document.getElementById('fuzzy_search_key_alt'),
            document.getElementById('fuzzy_search_key_x'),
        ];
        document.onkeydown = e => {
            pressedKeys[e.keyCode] = true;
            switch (e.keyCode) {
                case key_alt: {
                    el_alt.classList.add('bg-zinc-700');
                    break;
                }
                case key_x: {
                    el_x.classList.add('bg-zinc-700');
                    if (pressedKeys[key_alt]) {
                        fuzzy_search_modal.showModal();
                    }
                    break;
                }
            }
        };
        document.onkeyup = e => {
            pressedKeys[e.keyCode] = false;
            switch (e.keyCode) {
                case key_alt: {
                    el_alt.classList.remove('bg-zinc-700');
                    break;
                }
                case key_x: {
                    el_x.classList.remove('bg-zinc-700');
                    break;
                }
            }
        };

        const fuse = new Fuse(collection);

        const [
            fuzzy_search_button,
            fuzzy_search_modal,
            fuzzy_search_input,
            fuzzy_search_results,
        ] = [
            document.getElementById('fuzzy_search_button'),
            document.getElementById('fuzzy_search_modal'),
            document.getElementById('fuzzy_search_input'),
            document.getElementById('fuzzy_search_results'),
        ];

        fuzzy_search_modal.close();

        fuzzy_search_button.addEventListener('click', () => {
            fuzzy_search_modal.showModal();
        });

        fuzzy_search_input.addEventListener('input', e => {
            const search = fuse.search(fuzzy_search_input.value);
            for (let i = 0; i < collection.length; ++i) {
                collectionElements[i].style.display = 'none';
            }
            for (let i = search.length - 1; i >= 0; --i) {
                const matchedEl = document.getElementById(search[i].item);
                fuzzy_search_results.insertBefore(
                    matchedEl,
                    fuzzy_search_results.children[0]
                );
                matchedEl.style.display = 'block';
            }
        });

        for (let i = 0; i < collection.length; ++i) {
            fuzzy_search_results.appendChild(collectionElements[i]);
        }
    });
</script>
