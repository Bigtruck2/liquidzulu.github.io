---
import { ViewTransitions } from 'astro:transitions';
import '../../../css/global.css';
import { invert } from '../../../util/invert';
import { hasTag } from '../../../util/hasTag';
import {
    wikilinksToHypertextLinks,
    wikilinksToMdLinks,
    procWikilink,
    computeBacklinks,
} from '../../../util/wikilinks';
import { getCollection, getEntryBySlug } from 'astro:content';
import { Debug } from 'astro/components';
import { getNoteDescription } from '../../../util/getNoteDescription';

export const getStaticPaths = async () => {
    const brain = await getCollection('brain');
    return brain.map(i => ({ params: { note: i.slug } }));
};

const { note } = Astro.params;
const slug = note;
const noteInfo = await getEntryBySlug('brain', slug);

const brain = await getCollection('brain');
const notes = brain
    .filter(x => !hasTag(x.data.tags, 'meta'))
    .filter(x => !hasTag(x.data.tags, 'year'))
    .map(x => x.id.split('.')[0]);

const backlinks = computeBacklinks(brain);

const { Content, headings } = await noteInfo.render();

import Layout from '../../../layouts/BrainLayout.astro';
import {
    BuyCoffee,
    Footer,
    SkipToContent,
    NoisePanel,
} from '../../../components';

import { BrainNavbar, BrainTag, BrainPanel } from '../components';

import _ from 'lodash';
---

<Layout
    title={`${noteInfo.id.split('.')[0]} | Brain`}
    description={getNoteDescription(noteInfo.body)}
    ptype="article"
    published={noteInfo.data.date}
    MJ={true}
    slug={'brain'}>
    <!-- <ViewTransitions slot="head" /> -->
    <link
        rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Oswald&family=Phudu&family=Bebas+Neue&display=swap"
        slot="head"
        defer
    />
    <!-- <Debug {noteInfo} /> -->
    <SkipToContent href="#md-content" />
    <BrainNavbar note={slug} />
    <main id="md-content" class="w-full bg-[#0B0F13] absolute top-0">
        <!-- <button
             type="button"
             class="absolute bottom-4 right-8 lg:flex items-center text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 bg-slate-800 highlight-white/5 hover:bg-slate-700"
             >Show Backlinks<span
             class="ml-auto pl-3 flex-none text-xs font-semibold"
             ><kbd class="kbd bg-slate-700">Alt</kbd>
             <kbd class="kbd bg-slate-700">B</kbd></span
             ></button
             > -->
        <article
            transition:animate="slide"
            class="max-w-[64rem] m-auto min-h-[80vh] mt-6 text-justify md:p-16 p-6">
            <!-- {noteInfo.body} -->
            <div class="mb-[8rem]">
                <h1 class="oswald text-6xl font-bold text-center mt-24 mb-8">
                    {noteInfo.id.split('.')[0]}
                </h1>
                <ul
                    class="!list-none scale justify-center flex flex-wrap w-full !m-0">
                    {
                        (() => {
                            try {
                                return noteInfo.data.tags.map(x => (
                                    <li class="mx-1">
                                        <BrainTag name={x} />
                                    </li>
                                ));
                            } catch (e) {
                                let x = noteInfo.data.tags;
                                return (
                                    <li class="mx-1">
                                        <BrainTag name={x} />
                                    </li>
                                );
                            }
                        })()
                    }
                </ul>
            </div>
            <Content />
            <!-- <Fragment set:html={ContentStr} /> -->
        </article>
        {
            (() => {
                try {
                    return (
                        <div transition:animate="slide">
                            <div class="divider">
                                <span class="font-semibold">BACKLINKS</span>
                            </div>
                            <ul class="py-16 flex flex-row justify-center flex-wrap gap-3 w-[90vw] m-auto">
                                {_.uniq(backlinks[slug]).map(x => (
                                    <li class="grow">
                                        <a
                                            class="text-center backlink"
                                            href={`/brain/note/${x}`}>
                                            <BrainPanel>
                                                {
                                                    brain
                                                        .find(
                                                            entry =>
                                                                entry.slug == x
                                                        )
                                                        .id.split('.')[0]
                                                }
                                            </BrainPanel>
                                        </a>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    );
                } catch (e) {
                    return '';
                }
            })()
        }

        <Footer noShadow={true} bg />
    </main>
    <BuyCoffee>Like this content? Click here for more!</BuyCoffee>
</Layout>

<!-- is:global required to apply styles to the rendered MD -->
<style is:global lang="scss">
    .link-exists {
        @apply text-[#7C3AED] hover:text-[#9e67fc];
    }

    .link-doesnt-exist {
        @apply text-[#7C3AED]/50 cursor-not-allowed;
    }

    .footnotes {
        a {
            color: #7c3aed !important;
        }
    }

    .fn-highlight {
        @apply bg-zinc-600 rounded-sm p-[0.5rem] m-[-0.5rem];
    }
    #md-content {
        article {
            a:not(
                    .link-exists,
                    .link-doesnt-exist,
                    .brain-tag,
                    .backlink,
                    .data-footnote-backref
                ) {
                &::after {
                    content: 'â†µ';
                }
                @apply text-[#7C3AED] hover:text-[#9e67fc];
            }

            sup {
                a {
                    &::after {
                        content: '' !important;
                    }
                    color: #71717a !important;
                }
            }
        }

        .section-heading-link {
            -webkit-mask: url('/link.svg') no-repeat 50% 50%;
            mask: url('/link.svg') no-repeat 50% 50%;
            -webkit-mask-size: cover;
            mask-size: cover;
            @apply shrink-0 w-[2.5rem] h-[2rem] overflow-visible bg-slate-50 opacity-[0] ml-[-2.5rem] mr-2 transition-all;

            &:focus {
                @apply opacity-[0.8] bg-sky-500 scale-110;
            }
        }
        .header-wrapper {
            @apply flex items-center justify-center;

            &:hover {
                .section-heading-link {
                    @apply opacity-[0.2];
                }
            }
        }
        /*
        // abandoned because I cant turn a ::before into a link
        h1::before,
        h2::before,
        h3::before,
        h4::before {
        content: '';
        -webkit-mask: url('/link.svg') no-repeat 50% 50%;
        mask: url('/link.svg') no-repeat 50% 50%;
        -webkit-mask-size: cover;
        mask-size: cover;
        display: inline-block;
        width: 2rem;
        height: 2rem;
        @apply bg-slate-50 opacity-[0.2];
        }*/
        .h1 {
            @apply text-6xl font-bold text-center mt-24 mb-16;
        }

        .h2 {
            @apply text-5xl font-bold text-center mt-20 mb-12;
        }

        .h3 {
            @apply text-5xl font-semibold text-center mt-16 mb-10;
        }

        .h4 {
            @apply text-4xl font-semibold text-center mt-8 mb-4;
        }

        p,
        ol {
            @apply my-4 text-justify text-lg min-[2000px]:text-2xl min-[2500px]:text-3xl;
        }

        blockquote {
            @apply border-l-4 border-[#7C3AED] pl-4;
        }

        img {
            margin: auto;
        }

        article {
            ol,
            ul {
                @apply ml-6;
            }

            ol {
                @apply list-decimal;
            }

            ul {
                @apply list-disc;
            }

            /* a {
            @apply text-sky-500;

            &:not(.footref) {
            @apply hover:link;
            }
            } */

            .footnotes {
                & ~ p {
                    @apply text-left;
                }

                & li::marker {
                    @apply text-zinc-500;
                }
            }
        }
    }
</style>
